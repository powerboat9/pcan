Nonterminals useless in grammar

    identifier_list
    initializer
    initializer_list
    type_name
    selection_statement
    expression
    assignment_expression
    assignment_operator
    conditional_expression
    constant_expression
    logical_or_expression
    logical_and_expression
    inclusive_or_expression
    exclusive_or_expression
    and_expression
    equality_expression
    relational_expression
    shift_expression
    additive_expression
    multiplicative_expression
    cast_expression
    unary_expression
    unary_operator
    postfix_expression
    primary_expression
    argument_expression_list
    constant


Terminals unused in grammar

    K_ELSE
    K_SWITCH
    K_CASE
    K_SIZEOF
    K_DO
    K_IF
    K_WHILE
    EQUALS
    QMARK
    ASIGN
    ASIGN_STAR
    ASIGN_SLASH
    ASIGN_MOD
    ASIGN_PLUS
    ASIGN_MINUS
    ASIGN_SHL
    ASIGN_SHR
    ASIGN_AND
    ASIGN_XOR
    ASIGN_OR
    LOGIC_OR
    LOGIC_AND
    OR
    XOR
    AND
    EQEQ
    NEQ
    LT
    GT
    LTE
    GTE
    SHL
    SHR
    PLUS
    MINUS
    SLASH
    MOD
    INC
    DEC
    TILDA
    EXCLA
    DOT
    INDIR_AC
    INT_CONST
    CHAR_CONST
    FLOAT_CONST
    STRING
    ENUM_CONST


Rules useless in grammar

  111 init_declarator: declarator EQUALS initializer

  112 struct_declarator: declarator COLON constant_expression
  113                  | COLON constant_expression

  114 enumerator: IDENT EQUALS constant_expression

  115 direct_declarator: direct_declarator O_BRAK constant_expression C_BRAK
  116                  | direct_declarator O_PAREN identifier_list C_PAREN

  117 identifier_list: IDENT identifier_list COMMA IDENT

  118 initializer: assignment_expression
  119            | O_CBRAK initializer_list C_CBRAK
  120            | O_CBRAK initializer_list COMMA C_CBRAK

  121 initializer_list: initializer
  122                 | initializer_list COMMA initializer

  123 type_name: specifier_qualifier_list abstract_declarator
  124          | specifier_qualifier_list

  125 direct_abstract_declarator: direct_abstract_declarator O_BRAK constant_expression C_BRAK
  126                           | O_BRAK constant_expression C_BRAK

  127 statement: selection_statement

  128 labeled_statement: K_CASE constant_expression COLON statement

  129 expression_statement: expression SEMICOLON

  130 selection_statement: K_IF O_PAREN expression C_PAREN statement
  131                    | K_IF O_PAREN expression C_PAREN statement K_ELSE statement
  132                    | K_SWITCH O_PAREN expression C_PAREN statement

  133 iteration_statement: K_WHILE O_PAREN expression C_PAREN statement
  134                    | K_DO statement K_WHILE O_PAREN expression C_PAREN SEMICOLON
  135                    | K_FOR O_PAREN expression SEMICOLON expression SEMICOLON expression C_PAREN statement
  136                    | K_FOR O_PAREN SEMICOLON expression SEMICOLON expression C_PAREN statement
  137                    | K_FOR O_PAREN expression SEMICOLON SEMICOLON expression C_PAREN statement
  138                    | K_FOR O_PAREN expression SEMICOLON expression SEMICOLON C_PAREN statement
  139                    | K_FOR O_PAREN expression SEMICOLON SEMICOLON C_PAREN statement
  140                    | K_FOR O_PAREN SEMICOLON expression SEMICOLON C_PAREN statement
  141                    | K_FOR O_PAREN SEMICOLON SEMICOLON expression C_PAREN statement

  142 jump_statement: K_RETURN expression SEMICOLON

  143 expression: assignment_expression
  144           | expression COMMA assignment_expression

  145 assignment_expression: conditional_expression
  146                      | unary_expression assignment_operator assignment_expression

  147 assignment_operator: ASIGN
  148                    | ASIGN_STAR
  149                    | ASIGN_SLASH
  150                    | ASIGN_MOD
  151                    | ASIGN_PLUS
  152                    | ASIGN_MINUS
  153                    | ASIGN_SHL
  154                    | ASIGN_SHR
  155                    | ASIGN_AND
  156                    | ASIGN_XOR
  157                    | ASIGN_OR

  158 conditional_expression: logical_or_expression
  159                       | logical_or_expression QMARK expression COLON conditional_expression

  160 constant_expression: conditional_expression

  161 logical_or_expression: logical_and_expression
  162                      | logical_or_expression LOGIC_OR logical_and_expression

  163 logical_and_expression: inclusive_or_expression
  164                       | logical_and_expression LOGIC_AND inclusive_or_expression

  165 inclusive_or_expression: exclusive_or_expression
  166                        | inclusive_or_expression OR exclusive_or_expression

  167 exclusive_or_expression: and_expression
  168                        | exclusive_or_expression XOR and_expression

  169 and_expression: equality_expression
  170               | and_expression AND equality_expression

  171 equality_expression: relational_expression
  172                    | equality_expression EQEQ relational_expression
  173                    | equality_expression NEQ relational_expression

  174 relational_expression: shift_expression
  175                      | relational_expression LT shift_expression
  176                      | relational_expression GT shift_expression
  177                      | relational_expression LTE shift_expression
  178                      | relational_expression GTE shift_expression

  179 shift_expression: additive_expression
  180                 | shift_expression SHL additive_expression
  181                 | shift_expression SHR additive_expression

  182 additive_expression: multiplicative_expression
  183                    | additive_expression PLUS multiplicative_expression
  184                    | additive_expression MINUS multiplicative_expression

  185 multiplicative_expression: multiplicative_expression STAR cast_expression
  186                          | multiplicative_expression SLASH cast_expression
  187                          | multiplicative_expression MOD cast_expression

  188 cast_expression: unary_expression
  189                | O_PAREN type_name C_PAREN cast_expression

  190 unary_expression: postfix_expression
  191                 | INC unary_expression
  192                 | DEC unary_expression
  193                 | unary_operator cast_expression
  194                 | K_SIZEOF unary_expression
  195                 | K_SIZEOF O_PAREN type_name C_PAREN

  196 unary_operator: AND
  197               | STAR
  198               | PLUS
  199               | MINUS
  200               | TILDA
  201               | EXCLA

  202 postfix_expression: primary_expression
  203                   | postfix_expression O_BRAK expression C_BRAK
  204                   | postfix_expression O_PAREN argument_expression_list C_PAREN
  205                   | postfix_expression O_PAREN C_PAREN
  206                   | postfix_expression DOT IDENT
  207                   | postfix_expression INDIR_AC IDENT
  208                   | postfix_expression INC
  209                   | postfix_expression DEC

  210 primary_expression: IDENT
  211                   | constant
  212                   | STRING
  213                   | O_PAREN expression C_PAREN

  214 argument_expression_list: assignment_expression
  215                         | argument_expression_list COMMA assignment_expression

  216 constant: INT_CONST
  217         | CHAR_CONST
  218         | FLOAT_CONST
  219         | ENUM_CONST


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: external_declaration
    2                 | translation_unit external_declaration

    3 external_declaration: function_definition
    4                     | declaration

    5 function_definition: declaration_specifiers declarator declaration_list compound_statement
    6                    | declaration_specifiers declarator compound_statement
    7                    | declarator compound_statement
    8                    | declarator declaration_list compound_statement

    9 declaration: declaration_specifiers SEMICOLON
   10            | declaration_specifiers init_declarator_list SEMICOLON

   11 declaration_list: declaration
   12                 | declaration_list declaration

   13 declaration_specifiers: storage_class_specifier declaration_specifiers
   14                       | storage_class_specifier
   15                       | type_specifier declaration_specifiers
   16                       | type_specifier
   17                       | type_qualifier declaration_specifiers
   18                       | type_qualifier

   19 storage_class_specifier: K_AUTO
   20                        | K_REGISTER
   21                        | K_STATIC
   22                        | K_EXTERN
   23                        | K_TYPEDEF

   24 type_specifier: K_VOID
   25               | K_CHAR
   26               | K_SHORT
   27               | K_INT
   28               | K_LONG
   29               | K_FLOAT
   30               | K_DOUBLE
   31               | K_SIGNED
   32               | K_UNSIGNED
   33               | struct_or_union_specifier
   34               | enum_specifier
   35               | TYPEDEF_NAME

   36 type_qualifier: K_CONST
   37               | K_VOLATILE

   38 struct_or_union_specifier: struct_or_union IDENT O_CBRAK struct_declaration_list C_CBRAK
   39                          | struct_or_union O_CBRAK struct_declaration_list C_CBRAK
   40                          | struct_or_union IDENT

   41 struct_or_union: K_STRUCT
   42                | K_UNION

   43 struct_declaration_list: struct_declaration
   44                        | struct_declaration_list struct_declaration

   45 init_declarator_list: init_declarator
   46                     | init_declarator_list COMMA init_declarator

   47 init_declarator: declarator

   48 struct_declaration: specifier_qualifier_list struct_declarator_list SEMICOLON

   49 specifier_qualifier_list: type_specifier specifier_qualifier_list
   50                         | type_specifier
   51                         | type_qualifier specifier_qualifier_list
   52                         | type_qualifier

   53 struct_declarator_list: struct_declarator
   54                       | struct_declarator_list COMMA struct_declarator

   55 struct_declarator: declarator

   56 enum_specifier: K_ENUM IDENT O_CBRAK enumerator_list C_CBRAK
   57               | K_ENUM O_CBRAK enumerator_list C_CBRAK
   58               | K_ENUM IDENT

   59 enumerator_list: enumerator
   60                | enumerator_list COMMA enumerator

   61 enumerator: IDENT

   62 declarator: pointer direct_declarator
   63           | direct_declarator

   64 direct_declarator: IDENT
   65                  | O_PAREN declarator C_PAREN
   66                  | direct_declarator O_BRAK C_BRAK
   67                  | direct_declarator O_PAREN parameter_type_list C_PAREN
   68                  | direct_declarator O_PAREN C_PAREN

   69 pointer: STAR
   70        | STAR type_qualifier_list
   71        | STAR type_qualifier_list pointer
   72        | STAR pointer

   73 type_qualifier_list: type_qualifier
   74                    | type_qualifier_list type_qualifier

   75 parameter_type_list: parameter_list
   76                    | parameter_list COMMA TRIP_DOT

   77 parameter_list: parameter_declaration
   78               | parameter_list COMMA parameter_declaration

   79 parameter_declaration: declaration_specifiers declarator
   80                      | declaration_specifiers abstract_declarator
   81                      | declaration_specifiers

   82 abstract_declarator: pointer
   83                    | pointer direct_abstract_declarator
   84                    | direct_abstract_declarator

   85 direct_abstract_declarator: O_PAREN abstract_declarator C_PAREN
   86                           | direct_abstract_declarator O_BRAK C_BRAK
   87                           | O_BRAK C_BRAK
   88                           | direct_abstract_declarator O_PAREN parameter_type_list C_PAREN
   89                           | direct_abstract_declarator O_PAREN C_PAREN
   90                           | O_PAREN parameter_type_list C_PAREN
   91                           | O_PAREN C_PAREN

   92 statement: labeled_statement
   93          | expression_statement
   94          | compound_statement
   95          | iteration_statement
   96          | jump_statement

   97 labeled_statement: IDENT COLON statement
   98                  | K_DEFAULT COLON statement

   99 expression_statement: SEMICOLON

  100 compound_statement: O_CBRAK declaration_list statement_list C_CBRAK
  101                   | O_CBRAK declaration_list C_CBRAK
  102                   | O_CBRAK statement_list C_CBRAK
  103                   | O_CBRAK C_CBRAK

  104 statement_list: statement
  105               | statement_list statement

  106 iteration_statement: K_FOR O_PAREN SEMICOLON SEMICOLON C_PAREN statement

  107 jump_statement: K_GOTO IDENT SEMICOLON
  108               | K_CONTINUE SEMICOLON
  109               | K_BREAK SEMICOLON
  110               | K_RETURN SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    K_AUTO (258) 19
    K_DOUBLE (259) 30
    K_INT (260) 27
    K_STRUCT (261) 41
    K_BREAK (262) 109
    K_ELSE (263)
    K_LONG (264) 28
    K_SWITCH (265)
    K_CASE (266)
    K_ENUM (267) 56 57 58
    K_REGISTER (268) 20
    K_TYPEDEF (269) 23
    K_CHAR (270) 25
    K_EXTERN (271) 22
    K_RETURN (272) 110
    K_UNION (273) 42
    K_CONST (274) 36
    K_FLOAT (275) 29
    K_SHORT (276) 26
    K_UNSIGNED (277) 32
    K_CONTINUE (278) 108
    K_FOR (279) 106
    K_SIGNED (280) 31
    K_VOID (281) 24
    K_DEFAULT (282) 98
    K_GOTO (283) 107
    K_SIZEOF (284)
    K_VOLATILE (285) 37
    K_DO (286)
    K_IF (287)
    K_STATIC (288) 21
    K_WHILE (289)
    SEMICOLON (290) 9 10 48 99 106 107 108 109 110
    O_CBRAK (291) 38 39 56 57 100 101 102 103
    C_CBRAK (292) 38 39 56 57 100 101 102 103
    COMMA (293) 46 54 60 76 78
    EQUALS (294)
    COLON (295) 97 98
    O_PAREN (296) 65 67 68 85 88 89 90 91 106
    C_PAREN (297) 65 67 68 85 88 89 90 91 106
    O_BRAK (298) 66 86 87
    C_BRAK (299) 66 86 87
    STAR (300) 69 70 71 72
    TRIP_DOT (301) 76
    QMARK (302)
    ASIGN (303)
    ASIGN_STAR (304)
    ASIGN_SLASH (305)
    ASIGN_MOD (306)
    ASIGN_PLUS (307)
    ASIGN_MINUS (308)
    ASIGN_SHL (309)
    ASIGN_SHR (310)
    ASIGN_AND (311)
    ASIGN_XOR (312)
    ASIGN_OR (313)
    LOGIC_OR (314)
    LOGIC_AND (315)
    OR (316)
    XOR (317)
    AND (318)
    EQEQ (319)
    NEQ (320)
    LT (321)
    GT (322)
    LTE (323)
    GTE (324)
    SHL (325)
    SHR (326)
    PLUS (327)
    MINUS (328)
    SLASH (329)
    MOD (330)
    INC (331)
    DEC (332)
    TILDA (333)
    EXCLA (334)
    DOT (335)
    INDIR_AC (336)
    INT_CONST (337)
    CHAR_CONST (338)
    FLOAT_CONST (339)
    IDENT (340) 38 40 56 58 61 64 97 107
    STRING (341)
    ENUM_CONST (342)
    TYPEDEF_NAME (343) 35


Nonterminals, with rules where they appear

    $accept (89)
        on left: 0
    translation_unit (90)
        on left: 1 2
        on right: 0 2
    external_declaration (91)
        on left: 3 4
        on right: 1 2
    function_definition (92)
        on left: 5 6 7 8
        on right: 3
    declaration (93)
        on left: 9 10
        on right: 4 11 12
    declaration_list (94)
        on left: 11 12
        on right: 5 8 12 100 101
    declaration_specifiers (95)
        on left: 13 14 15 16 17 18
        on right: 5 6 9 10 13 15 17 79 80 81
    storage_class_specifier (96)
        on left: 19 20 21 22 23
        on right: 13 14
    type_specifier (97)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35
        on right: 15 16 49 50
    type_qualifier (98)
        on left: 36 37
        on right: 17 18 51 52 73 74
    struct_or_union_specifier (99)
        on left: 38 39 40
        on right: 33
    struct_or_union (100)
        on left: 41 42
        on right: 38 39 40
    struct_declaration_list (101)
        on left: 43 44
        on right: 38 39 44
    init_declarator_list (102)
        on left: 45 46
        on right: 10 46
    init_declarator (103)
        on left: 47
        on right: 45 46
    struct_declaration (104)
        on left: 48
        on right: 43 44
    specifier_qualifier_list (105)
        on left: 49 50 51 52
        on right: 48 49 51
    struct_declarator_list (106)
        on left: 53 54
        on right: 48 54
    struct_declarator (107)
        on left: 55
        on right: 53 54
    enum_specifier (108)
        on left: 56 57 58
        on right: 34
    enumerator_list (109)
        on left: 59 60
        on right: 56 57 60
    enumerator (110)
        on left: 61
        on right: 59 60
    declarator (111)
        on left: 62 63
        on right: 5 6 7 8 47 55 65 79
    direct_declarator (112)
        on left: 64 65 66 67 68
        on right: 62 63 66 67 68
    pointer (113)
        on left: 69 70 71 72
        on right: 62 71 72 82 83
    type_qualifier_list (114)
        on left: 73 74
        on right: 70 71 74
    parameter_type_list (115)
        on left: 75 76
        on right: 67 88 90
    parameter_list (116)
        on left: 77 78
        on right: 75 76 78
    parameter_declaration (117)
        on left: 79 80 81
        on right: 77 78
    abstract_declarator (118)
        on left: 82 83 84
        on right: 80 85
    direct_abstract_declarator (119)
        on left: 85 86 87 88 89 90 91
        on right: 83 84 86 88 89
    statement (120)
        on left: 92 93 94 95 96
        on right: 97 98 104 105 106
    labeled_statement (121)
        on left: 97 98
        on right: 92
    expression_statement (122)
        on left: 99
        on right: 93
    compound_statement (123)
        on left: 100 101 102 103
        on right: 5 6 7 8 94
    statement_list (124)
        on left: 104 105
        on right: 100 102 105
    iteration_statement (125)
        on left: 106
        on right: 95
    jump_statement (126)
        on left: 107 108 109 110
        on right: 96


State 0

    0 $accept: • translation_unit $end

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_PAREN       shift, and go to state 20
    STAR          shift, and go to state 21
    IDENT         shift, and go to state 22
    TYPEDEF_NAME  shift, and go to state 23

    translation_unit           go to state 24
    external_declaration       go to state 25
    function_definition        go to state 26
    declaration                go to state 27
    declaration_specifiers     go to state 28
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    declarator                 go to state 35
    direct_declarator          go to state 36
    pointer                    go to state 37


State 1

   19 storage_class_specifier: K_AUTO •

    $default  reduce using rule 19 (storage_class_specifier)


State 2

   30 type_specifier: K_DOUBLE •

    $default  reduce using rule 30 (type_specifier)


State 3

   27 type_specifier: K_INT •

    $default  reduce using rule 27 (type_specifier)


State 4

   41 struct_or_union: K_STRUCT •

    $default  reduce using rule 41 (struct_or_union)


State 5

   28 type_specifier: K_LONG •

    $default  reduce using rule 28 (type_specifier)


State 6

   56 enum_specifier: K_ENUM • IDENT O_CBRAK enumerator_list C_CBRAK
   57               | K_ENUM • O_CBRAK enumerator_list C_CBRAK
   58               | K_ENUM • IDENT

    O_CBRAK  shift, and go to state 38
    IDENT    shift, and go to state 39


State 7

   20 storage_class_specifier: K_REGISTER •

    $default  reduce using rule 20 (storage_class_specifier)


State 8

   23 storage_class_specifier: K_TYPEDEF •

    $default  reduce using rule 23 (storage_class_specifier)


State 9

   25 type_specifier: K_CHAR •

    $default  reduce using rule 25 (type_specifier)


State 10

   22 storage_class_specifier: K_EXTERN •

    $default  reduce using rule 22 (storage_class_specifier)


State 11

   42 struct_or_union: K_UNION •

    $default  reduce using rule 42 (struct_or_union)


State 12

   36 type_qualifier: K_CONST •

    $default  reduce using rule 36 (type_qualifier)


State 13

   29 type_specifier: K_FLOAT •

    $default  reduce using rule 29 (type_specifier)


State 14

   26 type_specifier: K_SHORT •

    $default  reduce using rule 26 (type_specifier)


State 15

   32 type_specifier: K_UNSIGNED •

    $default  reduce using rule 32 (type_specifier)


State 16

   31 type_specifier: K_SIGNED •

    $default  reduce using rule 31 (type_specifier)


State 17

   24 type_specifier: K_VOID •

    $default  reduce using rule 24 (type_specifier)


State 18

   37 type_qualifier: K_VOLATILE •

    $default  reduce using rule 37 (type_qualifier)


State 19

   21 storage_class_specifier: K_STATIC •

    $default  reduce using rule 21 (storage_class_specifier)


State 20

   65 direct_declarator: O_PAREN • declarator C_PAREN

    O_PAREN  shift, and go to state 20
    STAR     shift, and go to state 21
    IDENT    shift, and go to state 22

    declarator         go to state 40
    direct_declarator  go to state 36
    pointer            go to state 37


State 21

   69 pointer: STAR •
   70        | STAR • type_qualifier_list
   71        | STAR • type_qualifier_list pointer
   72        | STAR • pointer

    K_CONST     shift, and go to state 12
    K_VOLATILE  shift, and go to state 18
    STAR        shift, and go to state 21

    $default  reduce using rule 69 (pointer)

    type_qualifier       go to state 41
    pointer              go to state 42
    type_qualifier_list  go to state 43


State 22

   64 direct_declarator: IDENT •

    $default  reduce using rule 64 (direct_declarator)


State 23

   35 type_specifier: TYPEDEF_NAME •

    $default  reduce using rule 35 (type_specifier)


State 24

    0 $accept: translation_unit • $end
    2 translation_unit: translation_unit • external_declaration

    $end          shift, and go to state 44
    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_PAREN       shift, and go to state 20
    STAR          shift, and go to state 21
    IDENT         shift, and go to state 22
    TYPEDEF_NAME  shift, and go to state 23

    external_declaration       go to state 45
    function_definition        go to state 26
    declaration                go to state 27
    declaration_specifiers     go to state 28
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    declarator                 go to state 35
    direct_declarator          go to state 36
    pointer                    go to state 37


State 25

    1 translation_unit: external_declaration •

    $default  reduce using rule 1 (translation_unit)


State 26

    3 external_declaration: function_definition •

    $default  reduce using rule 3 (external_declaration)


State 27

    4 external_declaration: declaration •

    $default  reduce using rule 4 (external_declaration)


State 28

    5 function_definition: declaration_specifiers • declarator declaration_list compound_statement
    6                    | declaration_specifiers • declarator compound_statement
    9 declaration: declaration_specifiers • SEMICOLON
   10            | declaration_specifiers • init_declarator_list SEMICOLON

    SEMICOLON  shift, and go to state 46
    O_PAREN    shift, and go to state 20
    STAR       shift, and go to state 21
    IDENT      shift, and go to state 22

    init_declarator_list  go to state 47
    init_declarator       go to state 48
    declarator            go to state 49
    direct_declarator     go to state 36
    pointer               go to state 37


State 29

   13 declaration_specifiers: storage_class_specifier • declaration_specifiers
   14                       | storage_class_specifier •

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 14 (declaration_specifiers)

    declaration_specifiers     go to state 50
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34


State 30

   15 declaration_specifiers: type_specifier • declaration_specifiers
   16                       | type_specifier •

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 16 (declaration_specifiers)

    declaration_specifiers     go to state 51
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34


State 31

   17 declaration_specifiers: type_qualifier • declaration_specifiers
   18                       | type_qualifier •

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 18 (declaration_specifiers)

    declaration_specifiers     go to state 52
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34


State 32

   33 type_specifier: struct_or_union_specifier •

    $default  reduce using rule 33 (type_specifier)


State 33

   38 struct_or_union_specifier: struct_or_union • IDENT O_CBRAK struct_declaration_list C_CBRAK
   39                          | struct_or_union • O_CBRAK struct_declaration_list C_CBRAK
   40                          | struct_or_union • IDENT

    O_CBRAK  shift, and go to state 53
    IDENT    shift, and go to state 54


State 34

   34 type_specifier: enum_specifier •

    $default  reduce using rule 34 (type_specifier)


State 35

    7 function_definition: declarator • compound_statement
    8                    | declarator • declaration_list compound_statement

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_CBRAK       shift, and go to state 55
    TYPEDEF_NAME  shift, and go to state 23

    declaration                go to state 56
    declaration_list           go to state 57
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    compound_statement         go to state 59


State 36

   63 declarator: direct_declarator •
   66 direct_declarator: direct_declarator • O_BRAK C_BRAK
   67                  | direct_declarator • O_PAREN parameter_type_list C_PAREN
   68                  | direct_declarator • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 60
    O_BRAK   shift, and go to state 61

    $default  reduce using rule 63 (declarator)


State 37

   62 declarator: pointer • direct_declarator

    O_PAREN  shift, and go to state 20
    IDENT    shift, and go to state 22

    direct_declarator  go to state 62


State 38

   57 enum_specifier: K_ENUM O_CBRAK • enumerator_list C_CBRAK

    IDENT  shift, and go to state 63

    enumerator_list  go to state 64
    enumerator       go to state 65


State 39

   56 enum_specifier: K_ENUM IDENT • O_CBRAK enumerator_list C_CBRAK
   58               | K_ENUM IDENT •

    O_CBRAK  shift, and go to state 66

    $default  reduce using rule 58 (enum_specifier)


State 40

   65 direct_declarator: O_PAREN declarator • C_PAREN

    C_PAREN  shift, and go to state 67


State 41

   73 type_qualifier_list: type_qualifier •

    $default  reduce using rule 73 (type_qualifier_list)


State 42

   72 pointer: STAR pointer •

    $default  reduce using rule 72 (pointer)


State 43

   70 pointer: STAR type_qualifier_list •
   71        | STAR type_qualifier_list • pointer
   74 type_qualifier_list: type_qualifier_list • type_qualifier

    K_CONST     shift, and go to state 12
    K_VOLATILE  shift, and go to state 18
    STAR        shift, and go to state 21

    $default  reduce using rule 70 (pointer)

    type_qualifier  go to state 68
    pointer         go to state 69


State 44

    0 $accept: translation_unit $end •

    $default  accept


State 45

    2 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 2 (translation_unit)


State 46

    9 declaration: declaration_specifiers SEMICOLON •

    $default  reduce using rule 9 (declaration)


State 47

   10 declaration: declaration_specifiers init_declarator_list • SEMICOLON
   46 init_declarator_list: init_declarator_list • COMMA init_declarator

    SEMICOLON  shift, and go to state 70
    COMMA      shift, and go to state 71


State 48

   45 init_declarator_list: init_declarator •

    $default  reduce using rule 45 (init_declarator_list)


State 49

    5 function_definition: declaration_specifiers declarator • declaration_list compound_statement
    6                    | declaration_specifiers declarator • compound_statement
   47 init_declarator: declarator •

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_CBRAK       shift, and go to state 55
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 47 (init_declarator)

    declaration                go to state 56
    declaration_list           go to state 72
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    compound_statement         go to state 73


State 50

   13 declaration_specifiers: storage_class_specifier declaration_specifiers •

    $default  reduce using rule 13 (declaration_specifiers)


State 51

   15 declaration_specifiers: type_specifier declaration_specifiers •

    $default  reduce using rule 15 (declaration_specifiers)


State 52

   17 declaration_specifiers: type_qualifier declaration_specifiers •

    $default  reduce using rule 17 (declaration_specifiers)


State 53

   39 struct_or_union_specifier: struct_or_union O_CBRAK • struct_declaration_list C_CBRAK

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    TYPEDEF_NAME  shift, and go to state 23

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    struct_declaration_list    go to state 76
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 34


State 54

   38 struct_or_union_specifier: struct_or_union IDENT • O_CBRAK struct_declaration_list C_CBRAK
   40                          | struct_or_union IDENT •

    O_CBRAK  shift, and go to state 79

    $default  reduce using rule 40 (struct_or_union_specifier)


State 55

  100 compound_statement: O_CBRAK • declaration_list statement_list C_CBRAK
  101                   | O_CBRAK • declaration_list C_CBRAK
  102                   | O_CBRAK • statement_list C_CBRAK
  103                   | O_CBRAK • C_CBRAK

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_BREAK       shift, and go to state 80
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_RETURN      shift, and go to state 81
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_CONTINUE    shift, and go to state 82
    K_FOR         shift, and go to state 83
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_DEFAULT     shift, and go to state 84
    K_GOTO        shift, and go to state 85
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    SEMICOLON     shift, and go to state 86
    O_CBRAK       shift, and go to state 55
    C_CBRAK       shift, and go to state 87
    IDENT         shift, and go to state 88
    TYPEDEF_NAME  shift, and go to state 23

    declaration                go to state 56
    declaration_list           go to state 89
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    statement                  go to state 90
    labeled_statement          go to state 91
    expression_statement       go to state 92
    compound_statement         go to state 93
    statement_list             go to state 94
    iteration_statement        go to state 95
    jump_statement             go to state 96


State 56

   11 declaration_list: declaration •

    $default  reduce using rule 11 (declaration_list)


State 57

    8 function_definition: declarator declaration_list • compound_statement
   12 declaration_list: declaration_list • declaration

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_CBRAK       shift, and go to state 55
    TYPEDEF_NAME  shift, and go to state 23

    declaration                go to state 97
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    compound_statement         go to state 98


State 58

    9 declaration: declaration_specifiers • SEMICOLON
   10            | declaration_specifiers • init_declarator_list SEMICOLON

    SEMICOLON  shift, and go to state 46
    O_PAREN    shift, and go to state 20
    STAR       shift, and go to state 21
    IDENT      shift, and go to state 22

    init_declarator_list  go to state 47
    init_declarator       go to state 48
    declarator            go to state 99
    direct_declarator     go to state 36
    pointer               go to state 37


State 59

    7 function_definition: declarator compound_statement •

    $default  reduce using rule 7 (function_definition)


State 60

   67 direct_declarator: direct_declarator O_PAREN • parameter_type_list C_PAREN
   68                  | direct_declarator O_PAREN • C_PAREN

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    C_PAREN       shift, and go to state 100
    TYPEDEF_NAME  shift, and go to state 23

    declaration_specifiers     go to state 101
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    parameter_type_list        go to state 102
    parameter_list             go to state 103
    parameter_declaration      go to state 104


State 61

   66 direct_declarator: direct_declarator O_BRAK • C_BRAK

    C_BRAK  shift, and go to state 105


State 62

   62 declarator: pointer direct_declarator •
   66 direct_declarator: direct_declarator • O_BRAK C_BRAK
   67                  | direct_declarator • O_PAREN parameter_type_list C_PAREN
   68                  | direct_declarator • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 60
    O_BRAK   shift, and go to state 61

    $default  reduce using rule 62 (declarator)


State 63

   61 enumerator: IDENT •

    $default  reduce using rule 61 (enumerator)


State 64

   57 enum_specifier: K_ENUM O_CBRAK enumerator_list • C_CBRAK
   60 enumerator_list: enumerator_list • COMMA enumerator

    C_CBRAK  shift, and go to state 106
    COMMA    shift, and go to state 107


State 65

   59 enumerator_list: enumerator •

    $default  reduce using rule 59 (enumerator_list)


State 66

   56 enum_specifier: K_ENUM IDENT O_CBRAK • enumerator_list C_CBRAK

    IDENT  shift, and go to state 63

    enumerator_list  go to state 108
    enumerator       go to state 65


State 67

   65 direct_declarator: O_PAREN declarator C_PAREN •

    $default  reduce using rule 65 (direct_declarator)


State 68

   74 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 74 (type_qualifier_list)


State 69

   71 pointer: STAR type_qualifier_list pointer •

    $default  reduce using rule 71 (pointer)


State 70

   10 declaration: declaration_specifiers init_declarator_list SEMICOLON •

    $default  reduce using rule 10 (declaration)


State 71

   46 init_declarator_list: init_declarator_list COMMA • init_declarator

    O_PAREN  shift, and go to state 20
    STAR     shift, and go to state 21
    IDENT    shift, and go to state 22

    init_declarator    go to state 109
    declarator         go to state 99
    direct_declarator  go to state 36
    pointer            go to state 37


State 72

    5 function_definition: declaration_specifiers declarator declaration_list • compound_statement
   12 declaration_list: declaration_list • declaration

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_CBRAK       shift, and go to state 55
    TYPEDEF_NAME  shift, and go to state 23

    declaration                go to state 97
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    compound_statement         go to state 110


State 73

    6 function_definition: declaration_specifiers declarator compound_statement •

    $default  reduce using rule 6 (function_definition)


State 74

   49 specifier_qualifier_list: type_specifier • specifier_qualifier_list
   50                         | type_specifier •

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 50 (specifier_qualifier_list)

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    specifier_qualifier_list   go to state 111
    enum_specifier             go to state 34


State 75

   51 specifier_qualifier_list: type_qualifier • specifier_qualifier_list
   52                         | type_qualifier •

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    TYPEDEF_NAME  shift, and go to state 23

    $default  reduce using rule 52 (specifier_qualifier_list)

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    specifier_qualifier_list   go to state 112
    enum_specifier             go to state 34


State 76

   39 struct_or_union_specifier: struct_or_union O_CBRAK struct_declaration_list • C_CBRAK
   44 struct_declaration_list: struct_declaration_list • struct_declaration

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    C_CBRAK       shift, and go to state 113
    TYPEDEF_NAME  shift, and go to state 23

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    struct_declaration         go to state 114
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 34


State 77

   43 struct_declaration_list: struct_declaration •

    $default  reduce using rule 43 (struct_declaration_list)


State 78

   48 struct_declaration: specifier_qualifier_list • struct_declarator_list SEMICOLON

    O_PAREN  shift, and go to state 20
    STAR     shift, and go to state 21
    IDENT    shift, and go to state 22

    struct_declarator_list  go to state 115
    struct_declarator       go to state 116
    declarator              go to state 117
    direct_declarator       go to state 36
    pointer                 go to state 37


State 79

   38 struct_or_union_specifier: struct_or_union IDENT O_CBRAK • struct_declaration_list C_CBRAK

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    TYPEDEF_NAME  shift, and go to state 23

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    struct_declaration_list    go to state 118
    struct_declaration         go to state 77
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 34


State 80

  109 jump_statement: K_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 119


State 81

  110 jump_statement: K_RETURN • SEMICOLON

    SEMICOLON  shift, and go to state 120


State 82

  108 jump_statement: K_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 121


State 83

  106 iteration_statement: K_FOR • O_PAREN SEMICOLON SEMICOLON C_PAREN statement

    O_PAREN  shift, and go to state 122


State 84

   98 labeled_statement: K_DEFAULT • COLON statement

    COLON  shift, and go to state 123


State 85

  107 jump_statement: K_GOTO • IDENT SEMICOLON

    IDENT  shift, and go to state 124


State 86

   99 expression_statement: SEMICOLON •

    $default  reduce using rule 99 (expression_statement)


State 87

  103 compound_statement: O_CBRAK C_CBRAK •

    $default  reduce using rule 103 (compound_statement)


State 88

   97 labeled_statement: IDENT • COLON statement

    COLON  shift, and go to state 125


State 89

   12 declaration_list: declaration_list • declaration
  100 compound_statement: O_CBRAK declaration_list • statement_list C_CBRAK
  101                   | O_CBRAK declaration_list • C_CBRAK

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_BREAK       shift, and go to state 80
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_RETURN      shift, and go to state 81
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_CONTINUE    shift, and go to state 82
    K_FOR         shift, and go to state 83
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_DEFAULT     shift, and go to state 84
    K_GOTO        shift, and go to state 85
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    SEMICOLON     shift, and go to state 86
    O_CBRAK       shift, and go to state 55
    C_CBRAK       shift, and go to state 126
    IDENT         shift, and go to state 88
    TYPEDEF_NAME  shift, and go to state 23

    declaration                go to state 97
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    statement                  go to state 90
    labeled_statement          go to state 91
    expression_statement       go to state 92
    compound_statement         go to state 93
    statement_list             go to state 127
    iteration_statement        go to state 95
    jump_statement             go to state 96


State 90

  104 statement_list: statement •

    $default  reduce using rule 104 (statement_list)


State 91

   92 statement: labeled_statement •

    $default  reduce using rule 92 (statement)


State 92

   93 statement: expression_statement •

    $default  reduce using rule 93 (statement)


State 93

   94 statement: compound_statement •

    $default  reduce using rule 94 (statement)


State 94

  102 compound_statement: O_CBRAK statement_list • C_CBRAK
  105 statement_list: statement_list • statement

    K_BREAK     shift, and go to state 80
    K_RETURN    shift, and go to state 81
    K_CONTINUE  shift, and go to state 82
    K_FOR       shift, and go to state 83
    K_DEFAULT   shift, and go to state 84
    K_GOTO      shift, and go to state 85
    SEMICOLON   shift, and go to state 86
    O_CBRAK     shift, and go to state 55
    C_CBRAK     shift, and go to state 128
    IDENT       shift, and go to state 88

    statement             go to state 129
    labeled_statement     go to state 91
    expression_statement  go to state 92
    compound_statement    go to state 93
    iteration_statement   go to state 95
    jump_statement        go to state 96


State 95

   95 statement: iteration_statement •

    $default  reduce using rule 95 (statement)


State 96

   96 statement: jump_statement •

    $default  reduce using rule 96 (statement)


State 97

   12 declaration_list: declaration_list declaration •

    $default  reduce using rule 12 (declaration_list)


State 98

    8 function_definition: declarator declaration_list compound_statement •

    $default  reduce using rule 8 (function_definition)


State 99

   47 init_declarator: declarator •

    $default  reduce using rule 47 (init_declarator)


State 100

   68 direct_declarator: direct_declarator O_PAREN C_PAREN •

    $default  reduce using rule 68 (direct_declarator)


State 101

   79 parameter_declaration: declaration_specifiers • declarator
   80                      | declaration_specifiers • abstract_declarator
   81                      | declaration_specifiers •

    O_PAREN  shift, and go to state 130
    O_BRAK   shift, and go to state 131
    STAR     shift, and go to state 21
    IDENT    shift, and go to state 22

    $default  reduce using rule 81 (parameter_declaration)

    declarator                  go to state 132
    direct_declarator           go to state 36
    pointer                     go to state 133
    abstract_declarator         go to state 134
    direct_abstract_declarator  go to state 135


State 102

   67 direct_declarator: direct_declarator O_PAREN parameter_type_list • C_PAREN

    C_PAREN  shift, and go to state 136


State 103

   75 parameter_type_list: parameter_list •
   76                    | parameter_list • COMMA TRIP_DOT
   78 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 137

    $default  reduce using rule 75 (parameter_type_list)


State 104

   77 parameter_list: parameter_declaration •

    $default  reduce using rule 77 (parameter_list)


State 105

   66 direct_declarator: direct_declarator O_BRAK C_BRAK •

    $default  reduce using rule 66 (direct_declarator)


State 106

   57 enum_specifier: K_ENUM O_CBRAK enumerator_list C_CBRAK •

    $default  reduce using rule 57 (enum_specifier)


State 107

   60 enumerator_list: enumerator_list COMMA • enumerator

    IDENT  shift, and go to state 63

    enumerator  go to state 138


State 108

   56 enum_specifier: K_ENUM IDENT O_CBRAK enumerator_list • C_CBRAK
   60 enumerator_list: enumerator_list • COMMA enumerator

    C_CBRAK  shift, and go to state 139
    COMMA    shift, and go to state 107


State 109

   46 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 46 (init_declarator_list)


State 110

    5 function_definition: declaration_specifiers declarator declaration_list compound_statement •

    $default  reduce using rule 5 (function_definition)


State 111

   49 specifier_qualifier_list: type_specifier specifier_qualifier_list •

    $default  reduce using rule 49 (specifier_qualifier_list)


State 112

   51 specifier_qualifier_list: type_qualifier specifier_qualifier_list •

    $default  reduce using rule 51 (specifier_qualifier_list)


State 113

   39 struct_or_union_specifier: struct_or_union O_CBRAK struct_declaration_list C_CBRAK •

    $default  reduce using rule 39 (struct_or_union_specifier)


State 114

   44 struct_declaration_list: struct_declaration_list struct_declaration •

    $default  reduce using rule 44 (struct_declaration_list)


State 115

   48 struct_declaration: specifier_qualifier_list struct_declarator_list • SEMICOLON
   54 struct_declarator_list: struct_declarator_list • COMMA struct_declarator

    SEMICOLON  shift, and go to state 140
    COMMA      shift, and go to state 141


State 116

   53 struct_declarator_list: struct_declarator •

    $default  reduce using rule 53 (struct_declarator_list)


State 117

   55 struct_declarator: declarator •

    $default  reduce using rule 55 (struct_declarator)


State 118

   38 struct_or_union_specifier: struct_or_union IDENT O_CBRAK struct_declaration_list • C_CBRAK
   44 struct_declaration_list: struct_declaration_list • struct_declaration

    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_CHAR        shift, and go to state 9
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    C_CBRAK       shift, and go to state 142
    TYPEDEF_NAME  shift, and go to state 23

    type_specifier             go to state 74
    type_qualifier             go to state 75
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    struct_declaration         go to state 114
    specifier_qualifier_list   go to state 78
    enum_specifier             go to state 34


State 119

  109 jump_statement: K_BREAK SEMICOLON •

    $default  reduce using rule 109 (jump_statement)


State 120

  110 jump_statement: K_RETURN SEMICOLON •

    $default  reduce using rule 110 (jump_statement)


State 121

  108 jump_statement: K_CONTINUE SEMICOLON •

    $default  reduce using rule 108 (jump_statement)


State 122

  106 iteration_statement: K_FOR O_PAREN • SEMICOLON SEMICOLON C_PAREN statement

    SEMICOLON  shift, and go to state 143


State 123

   98 labeled_statement: K_DEFAULT COLON • statement

    K_BREAK     shift, and go to state 80
    K_RETURN    shift, and go to state 81
    K_CONTINUE  shift, and go to state 82
    K_FOR       shift, and go to state 83
    K_DEFAULT   shift, and go to state 84
    K_GOTO      shift, and go to state 85
    SEMICOLON   shift, and go to state 86
    O_CBRAK     shift, and go to state 55
    IDENT       shift, and go to state 88

    statement             go to state 144
    labeled_statement     go to state 91
    expression_statement  go to state 92
    compound_statement    go to state 93
    iteration_statement   go to state 95
    jump_statement        go to state 96


State 124

  107 jump_statement: K_GOTO IDENT • SEMICOLON

    SEMICOLON  shift, and go to state 145


State 125

   97 labeled_statement: IDENT COLON • statement

    K_BREAK     shift, and go to state 80
    K_RETURN    shift, and go to state 81
    K_CONTINUE  shift, and go to state 82
    K_FOR       shift, and go to state 83
    K_DEFAULT   shift, and go to state 84
    K_GOTO      shift, and go to state 85
    SEMICOLON   shift, and go to state 86
    O_CBRAK     shift, and go to state 55
    IDENT       shift, and go to state 88

    statement             go to state 146
    labeled_statement     go to state 91
    expression_statement  go to state 92
    compound_statement    go to state 93
    iteration_statement   go to state 95
    jump_statement        go to state 96


State 126

  101 compound_statement: O_CBRAK declaration_list C_CBRAK •

    $default  reduce using rule 101 (compound_statement)


State 127

  100 compound_statement: O_CBRAK declaration_list statement_list • C_CBRAK
  105 statement_list: statement_list • statement

    K_BREAK     shift, and go to state 80
    K_RETURN    shift, and go to state 81
    K_CONTINUE  shift, and go to state 82
    K_FOR       shift, and go to state 83
    K_DEFAULT   shift, and go to state 84
    K_GOTO      shift, and go to state 85
    SEMICOLON   shift, and go to state 86
    O_CBRAK     shift, and go to state 55
    C_CBRAK     shift, and go to state 147
    IDENT       shift, and go to state 88

    statement             go to state 129
    labeled_statement     go to state 91
    expression_statement  go to state 92
    compound_statement    go to state 93
    iteration_statement   go to state 95
    jump_statement        go to state 96


State 128

  102 compound_statement: O_CBRAK statement_list C_CBRAK •

    $default  reduce using rule 102 (compound_statement)


State 129

  105 statement_list: statement_list statement •

    $default  reduce using rule 105 (statement_list)


State 130

   65 direct_declarator: O_PAREN • declarator C_PAREN
   85 direct_abstract_declarator: O_PAREN • abstract_declarator C_PAREN
   90                           | O_PAREN • parameter_type_list C_PAREN
   91                           | O_PAREN • C_PAREN

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    O_PAREN       shift, and go to state 130
    C_PAREN       shift, and go to state 148
    O_BRAK        shift, and go to state 131
    STAR          shift, and go to state 21
    IDENT         shift, and go to state 22
    TYPEDEF_NAME  shift, and go to state 23

    declaration_specifiers      go to state 101
    storage_class_specifier     go to state 29
    type_specifier              go to state 30
    type_qualifier              go to state 31
    struct_or_union_specifier   go to state 32
    struct_or_union             go to state 33
    enum_specifier              go to state 34
    declarator                  go to state 40
    direct_declarator           go to state 36
    pointer                     go to state 133
    parameter_type_list         go to state 149
    parameter_list              go to state 103
    parameter_declaration       go to state 104
    abstract_declarator         go to state 150
    direct_abstract_declarator  go to state 135


State 131

   87 direct_abstract_declarator: O_BRAK • C_BRAK

    C_BRAK  shift, and go to state 151


State 132

   79 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 79 (parameter_declaration)


State 133

   62 declarator: pointer • direct_declarator
   82 abstract_declarator: pointer •
   83                    | pointer • direct_abstract_declarator

    O_PAREN  shift, and go to state 130
    O_BRAK   shift, and go to state 131
    IDENT    shift, and go to state 22

    $default  reduce using rule 82 (abstract_declarator)

    direct_declarator           go to state 62
    direct_abstract_declarator  go to state 152


State 134

   80 parameter_declaration: declaration_specifiers abstract_declarator •

    $default  reduce using rule 80 (parameter_declaration)


State 135

   84 abstract_declarator: direct_abstract_declarator •
   86 direct_abstract_declarator: direct_abstract_declarator • O_BRAK C_BRAK
   88                           | direct_abstract_declarator • O_PAREN parameter_type_list C_PAREN
   89                           | direct_abstract_declarator • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 153
    O_BRAK   shift, and go to state 154

    $default  reduce using rule 84 (abstract_declarator)


State 136

   67 direct_declarator: direct_declarator O_PAREN parameter_type_list C_PAREN •

    $default  reduce using rule 67 (direct_declarator)


State 137

   76 parameter_type_list: parameter_list COMMA • TRIP_DOT
   78 parameter_list: parameter_list COMMA • parameter_declaration

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    TRIP_DOT      shift, and go to state 155
    TYPEDEF_NAME  shift, and go to state 23

    declaration_specifiers     go to state 101
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    parameter_declaration      go to state 156


State 138

   60 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 60 (enumerator_list)


State 139

   56 enum_specifier: K_ENUM IDENT O_CBRAK enumerator_list C_CBRAK •

    $default  reduce using rule 56 (enum_specifier)


State 140

   48 struct_declaration: specifier_qualifier_list struct_declarator_list SEMICOLON •

    $default  reduce using rule 48 (struct_declaration)


State 141

   54 struct_declarator_list: struct_declarator_list COMMA • struct_declarator

    O_PAREN  shift, and go to state 20
    STAR     shift, and go to state 21
    IDENT    shift, and go to state 22

    struct_declarator  go to state 157
    declarator         go to state 117
    direct_declarator  go to state 36
    pointer            go to state 37


State 142

   38 struct_or_union_specifier: struct_or_union IDENT O_CBRAK struct_declaration_list C_CBRAK •

    $default  reduce using rule 38 (struct_or_union_specifier)


State 143

  106 iteration_statement: K_FOR O_PAREN SEMICOLON • SEMICOLON C_PAREN statement

    SEMICOLON  shift, and go to state 158


State 144

   98 labeled_statement: K_DEFAULT COLON statement •

    $default  reduce using rule 98 (labeled_statement)


State 145

  107 jump_statement: K_GOTO IDENT SEMICOLON •

    $default  reduce using rule 107 (jump_statement)


State 146

   97 labeled_statement: IDENT COLON statement •

    $default  reduce using rule 97 (labeled_statement)


State 147

  100 compound_statement: O_CBRAK declaration_list statement_list C_CBRAK •

    $default  reduce using rule 100 (compound_statement)


State 148

   91 direct_abstract_declarator: O_PAREN C_PAREN •

    $default  reduce using rule 91 (direct_abstract_declarator)


State 149

   90 direct_abstract_declarator: O_PAREN parameter_type_list • C_PAREN

    C_PAREN  shift, and go to state 159


State 150

   85 direct_abstract_declarator: O_PAREN abstract_declarator • C_PAREN

    C_PAREN  shift, and go to state 160


State 151

   87 direct_abstract_declarator: O_BRAK C_BRAK •

    $default  reduce using rule 87 (direct_abstract_declarator)


State 152

   83 abstract_declarator: pointer direct_abstract_declarator •
   86 direct_abstract_declarator: direct_abstract_declarator • O_BRAK C_BRAK
   88                           | direct_abstract_declarator • O_PAREN parameter_type_list C_PAREN
   89                           | direct_abstract_declarator • O_PAREN C_PAREN

    O_PAREN  shift, and go to state 153
    O_BRAK   shift, and go to state 154

    $default  reduce using rule 83 (abstract_declarator)


State 153

   88 direct_abstract_declarator: direct_abstract_declarator O_PAREN • parameter_type_list C_PAREN
   89                           | direct_abstract_declarator O_PAREN • C_PAREN

    K_AUTO        shift, and go to state 1
    K_DOUBLE      shift, and go to state 2
    K_INT         shift, and go to state 3
    K_STRUCT      shift, and go to state 4
    K_LONG        shift, and go to state 5
    K_ENUM        shift, and go to state 6
    K_REGISTER    shift, and go to state 7
    K_TYPEDEF     shift, and go to state 8
    K_CHAR        shift, and go to state 9
    K_EXTERN      shift, and go to state 10
    K_UNION       shift, and go to state 11
    K_CONST       shift, and go to state 12
    K_FLOAT       shift, and go to state 13
    K_SHORT       shift, and go to state 14
    K_UNSIGNED    shift, and go to state 15
    K_SIGNED      shift, and go to state 16
    K_VOID        shift, and go to state 17
    K_VOLATILE    shift, and go to state 18
    K_STATIC      shift, and go to state 19
    C_PAREN       shift, and go to state 161
    TYPEDEF_NAME  shift, and go to state 23

    declaration_specifiers     go to state 101
    storage_class_specifier    go to state 29
    type_specifier             go to state 30
    type_qualifier             go to state 31
    struct_or_union_specifier  go to state 32
    struct_or_union            go to state 33
    enum_specifier             go to state 34
    parameter_type_list        go to state 162
    parameter_list             go to state 103
    parameter_declaration      go to state 104


State 154

   86 direct_abstract_declarator: direct_abstract_declarator O_BRAK • C_BRAK

    C_BRAK  shift, and go to state 163


State 155

   76 parameter_type_list: parameter_list COMMA TRIP_DOT •

    $default  reduce using rule 76 (parameter_type_list)


State 156

   78 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 78 (parameter_list)


State 157

   54 struct_declarator_list: struct_declarator_list COMMA struct_declarator •

    $default  reduce using rule 54 (struct_declarator_list)


State 158

  106 iteration_statement: K_FOR O_PAREN SEMICOLON SEMICOLON • C_PAREN statement

    C_PAREN  shift, and go to state 164


State 159

   90 direct_abstract_declarator: O_PAREN parameter_type_list C_PAREN •

    $default  reduce using rule 90 (direct_abstract_declarator)


State 160

   85 direct_abstract_declarator: O_PAREN abstract_declarator C_PAREN •

    $default  reduce using rule 85 (direct_abstract_declarator)


State 161

   89 direct_abstract_declarator: direct_abstract_declarator O_PAREN C_PAREN •

    $default  reduce using rule 89 (direct_abstract_declarator)


State 162

   88 direct_abstract_declarator: direct_abstract_declarator O_PAREN parameter_type_list • C_PAREN

    C_PAREN  shift, and go to state 165


State 163

   86 direct_abstract_declarator: direct_abstract_declarator O_BRAK C_BRAK •

    $default  reduce using rule 86 (direct_abstract_declarator)


State 164

  106 iteration_statement: K_FOR O_PAREN SEMICOLON SEMICOLON C_PAREN • statement

    K_BREAK     shift, and go to state 80
    K_RETURN    shift, and go to state 81
    K_CONTINUE  shift, and go to state 82
    K_FOR       shift, and go to state 83
    K_DEFAULT   shift, and go to state 84
    K_GOTO      shift, and go to state 85
    SEMICOLON   shift, and go to state 86
    O_CBRAK     shift, and go to state 55
    IDENT       shift, and go to state 88

    statement             go to state 166
    labeled_statement     go to state 91
    expression_statement  go to state 92
    compound_statement    go to state 93
    iteration_statement   go to state 95
    jump_statement        go to state 96


State 165

   88 direct_abstract_declarator: direct_abstract_declarator O_PAREN parameter_type_list C_PAREN •

    $default  reduce using rule 88 (direct_abstract_declarator)


State 166

  106 iteration_statement: K_FOR O_PAREN SEMICOLON SEMICOLON C_PAREN statement •

    $default  reduce using rule 106 (iteration_statement)
